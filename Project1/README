Author: Adam Sunderman
NetID: asu1351

PART B INFORMATION

Font Storing Structure:
For font storing, I created a typedef'd font structure in meme_file_util.h that
stores the font_id, a string containing the name of the .simp font file, an 
array of characters (also a typedef'd object that stores the represented 
character and its x, y, w, and h values) and an integer to keep track of the 
number of characters.

Meme File Storing Structure:
For meme file storing, I created a typedef'd meme_file structure in 
meme_file_util.h that stores meme_id's (also typedef'd, defined below), fonts 
(defined above), and integers to store the number of memes and the number of 
fonts.

Meme ID Storing Structure:
To store meme id's, I created a typedef'd meme_id structure in meme_file_util.h 
that stores the name, the name of the .simp image that stores the image data, 
an array of text_id's (also typedef'd: defined below) and an integer that 
stores the number of text_id's.

Text ID Storing Structure:
To store text id's, I created a typedef'd text_id structure in meme_file_util.h
that stores the name of the text ID and the x and y coordinates of the text_id.

Action File Storing Structure:
For action file storing, I created a typedef'd action_file structure in 
meme_file_util.h that stores the name of the simp file to write to, the name of
the meme_id to use, the name of the font_id to use, an array of actions (also 
typedef'd: defined below)

Action Storing Structure:
For storage of individual actions, I created a typedef'd action structure in 
meme_file_util.h that stores the name of the text_id to use and the message to 
print at that text_id location on top of the meme being used.

Assumptions:
My file treats the input ACT, MEM, and FSF files strictly according to the 
provided examples. If any line is invalid, the whole program will halt and 
print the reason it stopped to stderr.

File Listing:

meme_file_util.c: source file that contains methods for interacting with ACT,
FSF and MEM files as well as the methods to execute specified actions in ACT
files.

meme.c: source file for the executable meme. parses arguments and then calls
methods from meme_file_util.c to read in the MEM file, read in the ACT file, 
and then execute actions provided in the ACT file.

PART A INFORMATION

Image Storing Structure:
For image storing, I created a .c and .h file entitled simp_util, this file had 
a  data structure entitled simp_file. simp_file contains three unsigned 
integers to store width, height, and num_pixels. It also contains a double 
pointer to a multi-dimensional array of pixels. each pixel is of type struct 
simp_pixel which simply stores four unsigned char values for RGBA values. 
Allocation of the simp_file structure is expected to be done outside of 
simp_util while allocation for the multi-dimensional array of pixels is 
handled in the read_simp_data method inside of simp_util.c (responsible for 
converting a simp file into this data structure). Freeing of all memory 
allocated is handled with the simp_data_clear method inside of simp_util. This 
data structure is the structure manipulated in all of the methods in simp_util

Assumptions:
My program (specifically cropping and overlay) expects that the coordinate, 
width and height all be within the boundaries of the original base image. If 
not the program will terminate after informing the user of incorrect usage. The 
crop, bw, overlay, and colorshift are all very leniant on argument checking. 
They make sure that the correct amount of arguments are received, but after 
that it parses assuming the arguments are correct. However, detailed error 
checking is included in all of the simp_util methods that will handle multiple 
forms of incorrect usage of an executable (it checks all file-pointers and 
struct pointers ensuring that tye are not null as well as checking the 
num_pixels against number of RGBA values ensuring the simp file is properly 
formatted. Any errors result in a return of -1 as well as printing out the 
error status to the console. The main executables catch the -1 value and print 
out what simp_util method was trying to execute when the err was found. Also
my program will not crash if you put strings in integer arguments, it will
interpret them as 0 and run the program.

File Listing:

simp_util.c: source file that contains methods to read, write, and manipulate 
simp data through the use of a simp_file structure

crop.c: source file for the executable crop. parses arguments and then calls 
simp_util.c  crop method

bw.c: source file for the executable bw. parses arguments and then calls 
simp_util.c  bw method

colorshift.c: source file for the executable colorshift. parses arguments and 
then calls simp_util.c colorshift method

overlay.c: source file for the executable overlay. parses arguments and then 
calls simp_util.c  overlay method
